{-# LANGUAGE CPP, TemplateHaskell, TransformListComp, ParallelListComp #-}
-----------------------------------------------------------------------------
--
-- Module      :  Main
-- Copyright   :
-- License     :  AllRightsReserved
--
-- Maintainer  :
-- Stability   :
-- Portability :
--
-- |
--
-----------------------------------------------------------------------------

module Main (
    main
) where

-- ------
-- Leksah
-- ------

import System.Exit (exitFailure)
import Test.QuickCheck.All (quickCheckAll)
import Data.List (stripPrefix)

-- ------
-- kMeans
-- ------

import Chapter6.Vector
import Chapter6.KMeans
import System.IO
import Debug.Trace
import Control.Monad (unless, liftM)
import Data.List.Split

-- ------------------
-- Leksah boilerplate
-- ------------------

-- Simple function to create a hello message.

hello s = "Hello " ++ s

-- Tell QuickCheck that if you strip "Hello " from the start of
-- hello s you will be left with s (for any s).

prop_hello s = stripPrefix "Hello " (hello s) == Just s

-- Hello World

exeMain = do
    putStrLn (hello "World")

-- Entry point for unit tests.

testMain = do
    allPass <- $quickCheckAll -- Run QuickCheck on all prop_ functions
    unless allPass exitFailure

-- This is a clunky, but portable, way to use the same Main module file
-- for both an application and for unit tests.
-- MAIN_FUNCTION is preprocessor macro set to exeMain or testMain.
-- That way we can use the same file for both an application and for tests.

#ifndef MAIN_FUNCTION
#define MAIN_FUNCTION exeMain
#endif


main :: IO ()
main = do (ajw,bbc) <- getPetals
          putStrLn $ show ajw
          putStrLn $ show bbc
          -- let result = kMeans2 initializeSimple 3 ([(4.9,9.2),(4.6,5.5),(1.7,1.1),(4.5,4.4)]::[(Double,Double)]) 0.001
          -- let result = kMeans2 initializeSimple 3 (ajw::[(Double,Double)]) 0.001
          let result = kMeans2 initializeTake 3 (ajw::[(Double,Double)]) 0.001
          putStrLn $ "the end" ++ show result
          return ()

getPetals = do
              withFile "iris3.data"  ReadMode  $ \inHandle ->
                loop inHandle [] []
       where loop inHandle petalsList kindList = do
               isEof <- hIsEOF inHandle
               if not isEof
                  then do client <- hGetLine inHandle
                          let petals2 = toVector client :: (Double, Double)
                              newListP = (petals2 : petalsList)

                              petals = splitOn "," client
                              kind = case (petals !! 4) of
                                        "Iris-virginica"    -> "v"
                                        "Iris-setosa"       -> "s"
                                        "Iris-versicolor"   -> "c"
                              newListK = (kind : kindList)

                          loop inHandle newListP newListK
                  else do putStrLn $ show $ reverse petalsList
                          putStrLn $ show $ reverse kindList
                          return $ (reverse petalsList, reverse kindList)










